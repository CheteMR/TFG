package com.example.connex_jetpack.ui.theme

import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import android.widget.Toast
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountCircle
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Shadow
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import com.example.connex_jetpack.R

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterTrabajadorScreen(navController: NavController) {
    var nombre by remember { mutableStateOf("") }
    var correo by remember { mutableStateOf("") }
    var telefono by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    val context = LocalContext.current
    // 游댳 Mapa de sectores con profesiones
    val sectores = mapOf(
        "Tecnolog칤a e Inform치tica" to listOf(
            "Desarrollador de Software",
            "Ciberseguridad",
            "Inteligencia Artificial",
            "Soporte T칠cnico",
            "Desarrollador Web",
            "Administrador de Redes",
            "Analista de Datos"
        ),
        "Ingenier칤a y Construcci칩n" to listOf(
            "Ingenier칤a Civil",
            "Ingenier칤a Industrial",
            "Ingenier칤a Mec치nica",
            "Ingenier칤a Electr칩nica",
            "Ingenier칤a Qu칤mica",
            "Arquitecto",
            "Dise침o de Interiores",
            "Energ칤as Renovables",
            "Obras p칰blicas",
            "Ingenier칤a Naval",
            "Ingenier칤a de Materiales",
        ),
        "Salud y Medicina" to listOf(
            "Medicina general",
            "Pediatr칤a",
            "Enfermer칤a",
            "Farmacia",
            "Biotecnolog칤a",
            "Psicolog칤a y Psiquiatr칤a",
            "Odontolog칤a",
            "Fisioterapua y Rehabilitaci칩n",
            "Veterinaria",
            "Nutrici칩n y Diet칠tica",
            "Asistencia Sanitaria y Geriatr칤a"
        ),
        "Educaci칩n y Profesorado" to listOf(
            "Educaci칩n Infantil",
            "Educaci칩n Primaria",
            "Formaci칩n Profesional",
            "Educaci칩n Especial",
            "Idiomas y Traductores",
            "Pedagog칤a y Psicopedagog칤a"
        ),
        "Administraci칩n y Finanzas" to listOf(
            "Contabilidad y Auditor칤a",
            "Banca y Servicios financieros",
            "Inversiones, Banca privada y Bolsa",
            "Seguros",
            "RRHH y Gesti칩n de Talento",
            "Administraci칩n y Secretariado",
        ),
        "Marketing" to listOf(
            "Marketing Digital",
            "Publicidad y Relaciones P칰blicas",
            "Dise침o gr치fico y Branding",
            "Copywriting y Creaci칩n de Contenido",
            "Community Management y RRSS",
            "Ventas",
            "E-Commerce",
            "Atenci칩n al Cliente y Call Center"
        ),
        "Industria y Manufactura" to listOf(
            "Producci칩n industrial",
            "Control de Calidad",
            "Mec치nica y Reparaci칩n",
            "Mantenimiento industrial",
            "Industria textil",
            "Miner칤a y extracci칩n",
            "Metalurgia y Siderurgia",
            "Petroqu칤mica y Refiner칤a"
        ),
        "Transporte y Log칤stica" to listOf(
            "Transporte terrestre (camiones, taxis, VTC)",
            "Transporte mar칤timo",
            "Transporte a칠reo y aerona칰tica",
            "Log칤sitica y Distribuci칩n",
            "Almac칠n y Cadena de Suministro",
            "Mensajer칤a y Paqueter칤a"
        ),
        "Hosteler칤a y Turismo" to listOf(
            "Restauraci칩n",
            "Hoteler칤a y Alojamiento",
            "Turismo y Gu칤as Tur칤sticos",
            "Agencias de Viaje",
            "Entretenimiento y Ocio",
            "Organizaci칩n de Eventos"
        ),
        "Arte, Cultura y Medios" to listOf(
            "Periodismo y Comunicaci칩n audiovisual",
            "Fotograf칤a y Producci칩n de v칤deo",
            "Cine y TV",
            "DJ/M칰sico/Producci칩n",
            "Radio y Locuci칩n",
            "Dise침o de Moda",
            "Pintura, Escultura",
            "Ilustraci칩n y Animaci칩n"
        ),
        "Agricultura, Pesca y Medio Ambiente" to listOf(
            "Agricultura y Ganader칤a",
            "Pesca y Acuicultura",
            "Protecci칩n del Medio Ambiente",
            "Energ칤as Renovables y Sostenibilidad",
            "Ingenier칤a Agr칩noma"
        ),
        "Derecho y Legal" to listOf(
            "Abogado",
            "Procurador",
            "Pasante",
            "Mediador",
            "Oficial de Notar칤a",
            "Asesor칤a legal"
        ),
        "Ciencia e Investigaci칩n" to listOf(
            "Investigaci칩n cient칤fica",
            "F칤sica/Qu칤mica",
            "Matem치ticas y Estad칤stica"
        ),
        "Deportes y Bienestar" to listOf(
            "Entrenador Personal",
            "Fisioterapia deportiva"
        )
    )

    val sectorNombres = sectores.keys.toList()
    var expandedSector by remember { mutableStateOf(false) }
    var sectorSeleccionado by remember { mutableStateOf(sectorNombres[0]) }
    var expandedProfesion by remember { mutableStateOf(false) }
    var profesionSeleccionada by remember {
        mutableStateOf(sectores[sectorSeleccionado]?.get(0) ?: "")
    }

    val fuenteTextos = FontFamily(Font(R.font.sairastencilone))
    val estiloTexto = TextStyle(
        fontSize = 40.sp,
        fontWeight = FontWeight.Bold,
        color = Color.DarkGray,
        textAlign = TextAlign.Center,
        fontFamily = fuenteTextos,
        shadow = Shadow(color = Color(0xFF252525), offset = Offset(2f, 2f), blurRadius = 8f)
    )

    val formularioValido = nombre.isNotBlank() &&
            correo.isNotBlank() &&
            telefono.isNotBlank() &&
            sectorSeleccionado.isNotBlank() &&
            profesionSeleccionada.isNotBlank() &&
            password.isNotBlank()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF4E8ADB))
            .imePadding()
    )

        // 游댳 FORMULARIO SCROLLABLE
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 16.dp, start = 16.dp, end = 16.dp, bottom = 16.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Spacer(modifier = Modifier.height(20.dp))

            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(8.dp, RoundedCornerShape(12.dp))
                    .background(Color.White, RoundedCornerShape(12.dp))
                    .padding(20.dp)
            ) {
                Column {
                    Text("Registro de Trabajador", style = estiloTexto)

                    Spacer(modifier = Modifier.height(20.dp))

                    OutlinedTextField(
                        value = nombre,
                        onValueChange = { nombre = it },
                        label = { Text("Nombre y Apellidos") },
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(10.dp))

                    OutlinedTextField(
                        value = correo,
                        onValueChange = { correo = it.trim() },
                        label = { Text("Correo Electr칩nico") },
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Email),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(10.dp))

                    OutlinedTextField(
                        value = telefono,
                        onValueChange = { telefono = it },
                        label = { Text("Tel칠fono") },
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(10.dp))

                    Text("Selecciona tu sector", color = Color.Black)

                    ExposedDropdownMenuBox(
                        expanded = expandedSector,
                        onExpandedChange = { expandedSector = !expandedSector }
                    ) {
                        OutlinedTextField(
                            value = sectorSeleccionado,
                            onValueChange = {},
                            readOnly = true,
                            label = { Text("Sector") },
                            trailingIcon = {
                                ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedSector)
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .menuAnchor()
                        )

                        ExposedDropdownMenu(
                            expanded = expandedSector,
                            onDismissRequest = { expandedSector = false }
                        ) {
                            sectorNombres.forEach { sector ->
                                DropdownMenuItem(
                                    text = { Text(sector) },
                                    onClick = {
                                        sectorSeleccionado = sector
                                        profesionSeleccionada = sectores[sector]?.get(0) ?: ""
                                        expandedSector = false
                                    }
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(10.dp))

                    Text("Selecciona tu profesi칩n", color = Color.Black)

                    ExposedDropdownMenuBox(
                        expanded = expandedProfesion,
                        onExpandedChange = { expandedProfesion = !expandedProfesion }
                    ) {
                        OutlinedTextField(
                            value = profesionSeleccionada,
                            onValueChange = {},
                            readOnly = true,
                            label = { Text("Profesi칩n") },
                            trailingIcon = {
                                ExposedDropdownMenuDefaults.TrailingIcon(expanded = expandedProfesion)
                            },
                            modifier = Modifier
                                .fillMaxWidth()
                                .menuAnchor()
                        )

                        ExposedDropdownMenu(
                            expanded = expandedProfesion,
                            onDismissRequest = { expandedProfesion = false }
                        ) {
                            sectores[sectorSeleccionado]?.forEach { profesion ->
                                DropdownMenuItem(
                                    text = { Text(profesion) },
                                    onClick = {
                                        profesionSeleccionada = profesion
                                        expandedProfesion = false
                                    }
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(10.dp))

                    OutlinedTextField(
                        value = password,
                        onValueChange = { password = it },
                        label = { Text("Contrase침a") },
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
                        modifier = Modifier.fillMaxWidth()
                    )

                    Spacer(modifier = Modifier.height(20.dp))

                    Button(
                        onClick = {
                            val auth = FirebaseAuth.getInstance()
                            val db = FirebaseFirestore.getInstance()

                            // Validaci칩n de email
                            if (!android.util.Patterns.EMAIL_ADDRESS.matcher(correo).matches()) {
                                Toast.makeText(context, "Correo no v치lido", Toast.LENGTH_SHORT).show()
                                return@Button
                            }

                            // Validaci칩n de contrase침a
                            if (password.length < 6) {
                                Toast.makeText(context, "La contrase침a debe tener al menos 6 caracteres", Toast.LENGTH_SHORT).show()
                                return@Button
                            }

                            // Crear cuenta en Firebase Auth
                            auth.createUserWithEmailAndPassword(correo, password)
                                .addOnSuccessListener { result ->
                                    val uid = result.user?.uid ?: return@addOnSuccessListener

                                    val trabajadorData = hashMapOf(
                                        "nombre" to nombre,
                                        "correo" to correo,
                                        "tel칠fono" to telefono,
                                        "sector" to sectorSeleccionado,
                                        "profesi칩n" to profesionSeleccionada,
                                        "tipo" to "trabajador"
                                    )

                                    db.collection("trabajadores").document(uid)
                                        .set(trabajadorData)
                                        .addOnSuccessListener {
                                            Toast.makeText(context, "Registro completado", Toast.LENGTH_SHORT).show()
                                            navController.navigate("registro_completado")
                                        }
                                        .addOnFailureListener { e ->
                                            Toast.makeText(context, "Error al guardar en Firestore: ${e.message}", Toast.LENGTH_LONG).show()
                                        }
                                }
                                .addOnFailureListener { e ->
                                    Toast.makeText(context, "Error al registrar usuario: ${e.message}", Toast.LENGTH_LONG).show()
                                }
                        },
                        enabled = formularioValido,
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = if (formularioValido) Color(0xFF4E8ADB) else Color.LightGray,
                            contentColor = Color.White
                        )
                    ) {
                        Text(
                            text = "Registrarse",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold
                        )
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    Button(
                        onClick = { navController.popBackStack() },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.buttonColors(containerColor = Color.LightGray)
                    ) {
                        Text("Volver", color = Color.Black)
                    }
                }
            }

            Spacer(modifier = Modifier.height(50.dp))
        }
    }
